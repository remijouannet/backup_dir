#!/bin/bash

datediff() {
    d1=$(date -d "$1" +%s)
    d2=$(date -d "$2" +%s)
    echo $(( (d1 - d2) / 86400 ))
}

contains() {
  local e
  for e in "${@:2}"; do [[ "$e" == "$1" ]] && return 0; done
  return 1
}

return1(){
	return 1
}

check() {
	$@;exitcode=$?
 
	if [ $exitcode -ne 0 ] ;
	then
		echo $(date +"$DATE_FORMAT_LOG")" error";
		exit $exitcode ;
	fi
}


rotate(){
	local dir=$1
	local rotate=$2

	echo $(date +"$DATE_FORMAT_LOG")" rotate $dir $rotate"
	
	find $dir -ctime +$rotate -type f -name '*.tar.gz' -exec rm -f {} \;
}


backup() {
	local dir=$1
	local type_backup=$2
	local rotate=$3
	
	local dir_backup=$DIR_BACKUP/$type_backup/$(basename $dir)
	local tar_backup=$dir_backup/$(basename $dir)'_'$(date +"$DATE_FORMAT_BACKUP")'.tar.gz'

	echo $(date +"$DATE_FORMAT_LOG")" backup $dir $type_backup"
	
	[ -d $dir_backup ] || check mkdir $dir_backup
	
	check tar czf $tar_backup $dir

	chmod 600 $tar_backup

	rotate $dir_backup $rotate	
}


#########################BEGINNGING#########################


if [ "$#" -eq 1 ] && [ -f "$1" ]	
then
	. $1
elif [ -f ./backup_dir.ini ]	
then
	. ./backup_dir.ini
elif [ -f /etc/backup_dir/backup_dir.ini ]
then
        . /etc/backup_dir/backup_dir.ini
else
	echo $(date +"$DATE_FORMAT_LOG")\
		" could not find /etc/backup_dir/backup_dir.ini or backup_dir.ini or $1"
	exit 1
fi

prebackup

echo $(date +"$DATE_FORMAT_LOG")" check gunzip"
check which gunzip;

echo $(date +"$DATE_FORMAT_LOG")" check tar"
check which tar;

echo $(date +"$DATE_FORMAT_LOG")" check $DIR"
check ls $DIR;

echo $(date +"$DATE_FORMAT_LOG")" check $DIR_BACKUP"
check ls $DIR_BACKUP;

echo $(date +"$DATE_FORMAT_LOG")" Test writing permissions $DIR_BACKUP"
[ -w $DIR_BACKUP ] || check return1;

echo $(date +"$DATE_FORMAT_LOG")" create $DIR_BACKUP/daily"
[ $DAILY = false ] || [ -d $DIR_BACKUP/daily ] || check mkdir $DIR_BACKUP/daily

echo $(date +"$DATE_FORMAT_LOG")" create $DIR_BACKUP/weekly"
[ $WEEKLY = false ] || [ -d $DIR_BACKUP/weekly ] || check mkdir $DIR_BACKUP/weekly

echo $(date +"$DATE_FORMAT_LOG")" create $DIR_BACKUP/monthly"
[ $MONTHLY = false ] || [ -d $DIR_BACKUP/monthly ] || check mkdir $DIR_BACKUP/monthly

CURRENT_DOW=$(date +'%u')
CURRENT_DOM=$(date +'%d' | sed -e 's/^0//g')

ROTATE_WEEKLY=$(datediff "now" "-$ROTATE_WEEKLY week")
ROTATE_MONTHLY=$(datediff "now" "-$ROTATE_MONTHLY month")

[ ! -z "$OPTS_GREP" ] || OPTS_GREP="."

echo test > /dev/null | grep $OPTS_GREP || OPTS_GREP="."

check find $DIR -mindepth 1 -maxdepth 1 -type d | grep $OPTS_GREP |
while read dir
do
	if [ $DAILY = true ]
	then
		[ $(contains $CURRENT_DOW ${DAYS_DAILY[@]};echo $?) = 1 ] || \
			backup $dir "daily" $ROTATE_DAILY;
	elif [ $WEEKLY = true ]
	then
		[ $CURRENT_DOW != $DAY_WEEKLY ] || \
			 backup $dir "weekly" $ROTATE_WEEKLY;
	elif [ $MONTHLY = true ]
	then
		[ $CURRENT_DOM != $DAY_MONTHLY ] || \
			 backup $dir "monthly" $ROTATE_MONTHLY;
	fi
done;

postbackup

exit 0
